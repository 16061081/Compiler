1 KeyWord const
2 KeyWord int
3 Identifier a
4 assign =
5 add +
6 ConstantInt 5
7 Semicolon ;
8 KeyWord const
9 KeyWord char
10 Identifier m
11 assign =
12 ConstantInt 32
13 Semicolon ;
14 KeyWord const
15 KeyWord int
16 Identifier z
17 assign =
18 ConstantInt 6
19 Comma ,
20 Identifier b
21 assign =
22 ConstantInt 10
23 Semicolon ;
24 Identifier CONST
25 KeyWord char
26 Identifier q
27 assign =
28 ConstantInt 39
29 Comma ,
30 Identifier p
31 assign =
32 sub -
33 ConstantInt 66
34 Semicolon ;
35 KeyWord int
36 Identifier aa
37 Comma ,
38 Identifier bb
39 Comma ,
40 Identifier cc
41 Comma ,
42 Identifier ss
43 LeftBracket [
44 ConstantInt 1
45 RightBracket ]
46 Semicolon ;
47 KeyWord char
48 Identifier mm
49 Comma ,
50 Identifier nn
51 Comma ,
52 Identifier zz
53 Comma ,
54 Identifier str_test
55 LeftBracket [
56 ConstantInt 37
57 RightBracket ]
58 Semicolon ;
59 KeyWord int
60 Identifier number
61 LeftBracket [
62 ConstantInt 30
63 RightBracket ]
64 Semicolon ;
65 KeyWord void
66 Identifier f3
67 LeftParentheis (
68 RightParenthesis )
69 LeftBrace {
70 KeyWord return
71 Semicolon ;
72 RightBrace }
73 KeyWord int
74 Identifier f4
75 LeftParentheis (
76 KeyWord int
77 Identifier a
78 Comma ,
79 KeyWord int
80 Identifier b
81 RightParenthesis )
82 LeftBrace {
83 KeyWord if
84 LeftParentheis (
85 Identifier a
86 bgt >
87 Identifier b
88 RightParenthesis )
89 KeyWord return
90 LeftParentheis (
91 Identifier a
92 RightParenthesis )
93 Semicolon ;
94 KeyWord if
95 LeftParentheis (
96 Identifier b
97 bgt >
98 Identifier a
99 RightParenthesis )
100 KeyWord return
101 LeftParentheis (
102 Identifier b
103 RightParenthesis )
104 Semicolon ;
105 KeyWord return
106 LeftParentheis (
107 Identifier m
108 add +
109 Identifier m
110 RightParenthesis )
111 Semicolon ;
112 RightBrace }
113 KeyWord int
114 Identifier m0
115 LeftParentheis (
116 RightParenthesis )
117 LeftBrace {
118 KeyWord return
119 LeftParentheis (
120 ConstantInt 88
121 RightParenthesis )
122 Semicolon ;
123 RightBrace }
124 KeyWord int
125 Identifier calcu
126 LeftParentheis (
127 KeyWord int
128 Identifier size
129 RightParenthesis )
130 LeftBrace {
131 KeyWord int
132 Identifier i
133 Semicolon ;
134 KeyWord int
135 Identifier sum
136 Semicolon ;
137 Identifier i
138 assign =
139 ConstantInt 0
140 Semicolon ;
141 Identifier sum
142 assign =
143 ConstantInt 0
144 Semicolon ;
145 Identifier do
146 LeftBrace {
147 Identifier sum
148 assign =
149 Identifier sum
150 add +
151 Identifier number
152 LeftBracket [
153 Identifier i
154 RightBracket ]
155 Semicolon ;
156 Identifier i
157 assign =
158 Identifier i
159 add +
160 ConstantInt 1
161 Semicolon ;
162 RightBrace }
163 Identifier while
164 LeftParentheis (
165 Identifier i
166 blt <
167 Identifier size
168 RightParenthesis )
169 KeyWord return
170 LeftParentheis (
171 Identifier sum
172 RightParenthesis )
173 Semicolon ;
174 RightBrace }
175 KeyWord int
176 Identifier calcuCov
177 LeftParentheis (
178 KeyWord int
179 Identifier size
180 Comma ,
181 KeyWord int
182 Identifier aver
183 RightParenthesis )
184 LeftBrace {
185 KeyWord int
186 Identifier i
187 Semicolon ;
188 KeyWord int
189 Identifier cov
190 Semicolon ;
191 KeyWord int
192 Identifier temp
193 Semicolon ;
194 Identifier i
195 assign =
196 ConstantInt 0
197 Semicolon ;
198 Identifier cov
199 assign =
200 ConstantInt 0
201 Semicolon ;
202 Identifier do
203 LeftBrace {
204 Identifier temp
205 assign =
206 LeftParentheis (
207 LeftParentheis (
208 Identifier number
209 LeftBracket [
210 Identifier i
211 RightBracket ]
212 sub -
213 Identifier aver
214 RightParenthesis )
215 mul *
216 LeftParentheis (
217 Identifier number
218 LeftBracket [
219 Identifier i
220 RightBracket ]
221 sub -
222 Identifier aver
223 RightParenthesis )
224 RightParenthesis )
225 Semicolon ;
226 Identifier cov
227 assign =
228 Identifier cov
229 add +
230 Identifier temp
231 Semicolon ;
232 RightBrace }
233 Identifier while
234 LeftParentheis (
235 Identifier i
236 blt <
237 Identifier size
238 RightParenthesis )
239 KeyWord return
240 LeftParentheis (
241 Identifier cov
242 RightParenthesis )
243 Semicolon ;
244 RightBrace }
245 KeyWord int
246 Identifier partion
247 LeftParentheis (
248 KeyWord int
249 Identifier sta
250 Comma ,
251 KeyWord int
252 Identifier end
253 RightParenthesis )
254 LeftBrace {
255 KeyWord int
256 Identifier x
257 Comma ,
258 Identifier temp
259 Semicolon ;
260 KeyWord int
261 Identifier i
262 Comma ,
263 Identifier j
264 Semicolon ;
265 Identifier x
266 assign =
267 Identifier number
268 LeftBracket [
269 Identifier end
270 RightBracket ]
271 Semicolon ;
272 Identifier i
273 assign =
274 Identifier sta
275 sub -
276 ConstantInt 1
277 Semicolon ;
278 Identifier j
279 assign =
280 Identifier sta
281 Semicolon ;
282 Identifier do
283 LeftBrace {
284 KeyWord if
285 LeftParentheis (
286 Identifier number
287 LeftBracket [
288 Identifier j
289 RightBracket ]
290 blt <=
291 Identifier x
292 RightParenthesis )
293 LeftBrace {
294 Identifier i
295 assign =
296 Identifier i
297 add +
298 ConstantInt 1
299 Semicolon ;
300 Identifier temp
301 assign =
302 Identifier number
303 LeftBracket [
304 Identifier i
305 RightBracket ]
306 Semicolon ;
307 Identifier number
308 LeftBracket [
309 Identifier i
310 RightBracket ]
311 assign =
312 Identifier number
313 LeftBracket [
314 Identifier j
315 RightBracket ]
316 Semicolon ;
317 Identifier number
318 LeftBracket [
319 Identifier j
320 RightBracket ]
321 assign =
322 Identifier temp
323 Semicolon ;
324 RightBrace }
325 Identifier j
326 assign =
327 Identifier j
328 add +
329 ConstantInt 1
330 Semicolon ;
331 RightBrace }
332 Identifier while
333 LeftParentheis (
334 Identifier j
335 blt <
336 Identifier end
337 RightParenthesis )
338 Identifier temp
339 assign =
340 Identifier number
341 LeftBracket [
342 Identifier i
343 add +
344 ConstantInt 1
345 RightBracket ]
346 Semicolon ;
347 Identifier number
348 LeftBracket [
349 Identifier i
350 add +
351 ConstantInt 1
352 RightBracket ]
353 assign =
354 Identifier number
355 LeftBracket [
356 Identifier end
357 RightBracket ]
358 Semicolon ;
359 Identifier number
360 LeftBracket [
361 Identifier end
362 RightBracket ]
363 assign =
364 Identifier temp
365 Semicolon ;
366 KeyWord return
367 LeftParentheis (
368 Identifier i
369 add +
370 ConstantInt 1
371 RightParenthesis )
372 Semicolon ;
373 RightBrace }
374 KeyWord void
375 Identifier quick_sort
376 LeftParentheis (
377 KeyWord int
378 Identifier sta
379 Comma ,
380 KeyWord int
381 Identifier end
382 RightParenthesis )
383 LeftBrace {
384 KeyWord int
385 Identifier q
386 Semicolon ;
387 KeyWord if
388 LeftParentheis (
389 Identifier sta
390 blt <
391 Identifier end
392 RightParenthesis )
393 LeftBrace {
394 Identifier q
395 assign =
396 Identifier partion
397 LeftParentheis (
398 Identifier sta
399 Comma ,
400 Identifier end
401 RightParenthesis )
402 Semicolon ;
403 Identifier quick_sort
404 LeftParentheis (
405 Identifier sta
406 Comma ,
407 Identifier q
408 sub -
409 ConstantInt 1
410 RightParenthesis )
411 Semicolon ;
412 Identifier quick_sort
413 LeftParentheis (
414 Identifier q
415 add +
416 ConstantInt 1
417 Comma ,
418 Identifier end
419 RightParenthesis )
420 Semicolon ;
421 RightBrace }
422 RightBrace }
423 KeyWord void
424 Identifier reverse
425 LeftParentheis (
426 KeyWord int
427 Identifier len
428 RightParenthesis )
429 LeftBrace {
430 KeyWord char
431 Identifier temp
432 Semicolon ;
433 KeyWord int
434 Identifier i
435 Semicolon ;
436 Identifier i
437 assign =
438 add +
439 ConstantInt 0
440 Semicolon ;
441 Identifier do
442 LeftBrace {
443 Identifier temp
444 assign =
445 Identifier str_test
446 LeftBracket [
447 Identifier i
448 RightBracket ]
449 Semicolon ;
450 Identifier str_test
451 LeftBracket [
452 Identifier i
453 RightBracket ]
454 assign =
455 Identifier str_test
456 LeftBracket [
457 LeftParentheis (
458 Identifier len
459 sub -
460 Identifier i
461 RightParenthesis )
462 RightBracket ]
463 Semicolon ;
464 Identifier str_test
465 LeftBracket [
466 Identifier len
467 sub -
468 Identifier i
469 RightBracket ]
470 assign =
471 Identifier temp
472 Semicolon ;
473 Identifier i
474 assign =
475 Identifier i
476 add +
477 add +
478 ConstantInt 1
479 Semicolon ;
480 RightBrace }
481 Identifier while
482 LeftParentheis (
483 Identifier i
484 blt <
485 Identifier len
486 div /
487 ConstantInt 2
488 RightParenthesis )
489 RightBrace }
490 KeyWord void
491 KeyWord main
492 LeftParentheis (
493 RightParenthesis )
494 LeftBrace {
495 KeyWord int
496 Identifier ra
497 Comma ,
498 Identifier rb
499 Comma ,
500 Identifier rc
501 Comma ,
502 Identifier rd
503 Semicolon ;
504 Semicolon ;
505 Semicolon ;
506 Semicolon ;
507 Semicolon ;
508 KeyWord int
509 Identifier i
510 Comma ,
511 Identifier k
512 Semicolon ;
513 KeyWord int
514 Identifier sum
515 Comma ,
516 Identifier cov
517 Comma ,
518 Identifier aver
519 Semicolon ;
520 KeyWord int
521 Identifier score
522 Semicolon ;
523 Identifier printf
524 LeftParentheis (
525 ConstantString " !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
526 RightParenthesis )
527 Semicolon ;
528 Identifier printf
529 LeftParentheis (
530 ConstantString "please input the mode before test(1~3,integer)"
531 RightParenthesis )
532 Semicolon ;
533 Identifier scanf
534 LeftParentheis (
535 Identifier score
536 RightParenthesis )
537 Semicolon ;
538 Identifier f3
539 LeftParentheis (
540 RightParenthesis )
541 Semicolon ;
542 KeyWord switch
543 LeftParentheis (
544 Identifier score
545 RightParenthesis )
546 LeftBrace {
547 KeyWord case
548 ConstantChar 'E'
549 colon :
550 LeftBrace {
551 Identifier printf
552 LeftParentheis (
553 ConstantString "easy .."
554 RightParenthesis )
555 Semicolon ;
556 RightBrace }
557 KeyWord case
558 ConstantChar 'M'
559 colon :
560 Identifier printf
561 LeftParentheis (
562 ConstantString "middle"
563 RightParenthesis )
564 Semicolon ;
565 KeyWord case
566 add +
567 ConstantInt 72
568 colon :
569 Identifier printf
570 LeftParentheis (
571 ConstantString "Hard"
572 RightParenthesis )
573 Semicolon ;
574 RightBrace }
575 Identifier str_test
576 LeftBracket [
577 ConstantInt 0
578 RightBracket ]
579 assign =
580 ConstantChar 'h'
581 Semicolon ;
582 Identifier str_test
583 LeftBracket [
584 ConstantInt 1
585 RightBracket ]
586 assign =
587 ConstantChar 'e'
588 Semicolon ;
589 Identifier str_test
590 LeftBracket [
591 ConstantInt 2
592 RightBracket ]
593 assign =
594 ConstantChar 'l'
595 Semicolon ;
596 Identifier str_test
597 LeftBracket [
598 ConstantInt 3
599 RightBracket ]
600 assign =
601 ConstantChar 'l'
602 Semicolon ;
603 Identifier str_test
604 LeftBracket [
605 ConstantInt 4
606 RightBracket ]
607 assign =
608 ConstantChar 'o'
609 Semicolon ;
610 Identifier str_test
611 LeftBracket [
612 ConstantInt 5
613 RightBracket ]
614 assign =
615 ConstantChar '_'
616 Semicolon ;
617 Identifier reverse
618 LeftParentheis (
619 ConstantInt 5
620 RightParenthesis )
621 Semicolon ;
622 Identifier printf
623 LeftParentheis (
624 ConstantString "The reverse str of hello_ is:"
625 RightParenthesis )
626 Semicolon ;
627 Identifier printf
628 LeftParentheis (
629 Identifier str_test
630 LeftBracket [
631 ConstantInt 0
632 RightBracket ]
633 RightParenthesis )
634 Semicolon ;
635 Identifier printf
636 LeftParentheis (
637 Identifier str_test
638 LeftBracket [
639 ConstantInt 1
640 RightBracket ]
641 RightParenthesis )
642 Semicolon ;
643 Identifier printf
644 LeftParentheis (
645 Identifier str_test
646 LeftBracket [
647 ConstantInt 2
648 RightBracket ]
649 RightParenthesis )
650 Semicolon ;
651 Identifier printf
652 LeftParentheis (
653 Identifier str_test
654 LeftBracket [
655 ConstantInt 3
656 RightBracket ]
657 RightParenthesis )
658 Semicolon ;
659 Identifier printf
660 LeftParentheis (
661 Identifier str_test
662 LeftBracket [
663 ConstantInt 4
664 RightBracket ]
665 RightParenthesis )
666 Semicolon ;
667 Identifier printf
668 LeftParentheis (
669 ConstantString "Please input four integers"
670 RightParenthesis )
671 Semicolon ;
672 Semicolon ;
673 Semicolon ;
674 Semicolon ;
675 Semicolon ;
676 Identifier scanf
677 LeftParentheis (
678 Identifier ra
679 Comma ,
680 Identifier rb
681 Comma ,
682 Identifier rc
683 Comma ,
684 Identifier rd
685 RightParenthesis )
686 Semicolon ;
687 Identifier aa
688 assign =
689 Identifier a
690 add +
691 LeftParentheis (
692 add +
693 LeftParentheis (
694 sub -
695 Identifier a
696 add +
697 Identifier m
698 RightParenthesis )
699 RightParenthesis )
700 Semicolon ;
701 Identifier printf
702 LeftParentheis (
703 ConstantString "The value of aa is "
704 Comma ,
705 Identifier aa
706 RightParenthesis )
707 Semicolon ;
708 Identifier ss
709 LeftBracket [
710 ConstantInt 0
711 RightBracket ]
712 assign =
713 Identifier a
714 add +
715 LeftParentheis (
716 sub -
717 Identifier a
718 RightParenthesis )
719 Semicolon ;
720 Identifier printf
721 LeftParentheis (
722 ConstantString "the number of ss[0] is "
723 Comma ,
724 Identifier ss
725 LeftBracket [
726 ConstantInt 0
727 RightBracket ]
728 RightParenthesis )
729 Semicolon ;
730 Identifier ra
731 assign =
732 LeftParentheis (
733 LeftParentheis (
734 LeftParentheis (
735 Identifier ra
736 add +
737 Identifier rb
738 mul *
739 Identifier rc
740 add +
741 Identifier rd
742 RightParenthesis )
743 div /
744 LeftParentheis (
745 LeftParentheis (
746 LeftParentheis (
747 LeftParentheis (
748 Identifier rb
749 mul *
750 Identifier rc
751 RightParenthesis )
752 RightParenthesis )
753 add +
754 LeftParentheis (
755 Identifier rm
756 add +
757 Identifier rn
758 RightParenthesis )
759 RightParenthesis )
760 add +
761 LeftParentheis (
762 Identifier m0
763 LeftParentheis (
764 RightParenthesis )
765 RightParenthesis )
766 RightParenthesis )
767 RightParenthesis )
768 add +
769 LeftParentheis (
770 Identifier f4
771 LeftParentheis (
772 Identifier ra
773 Comma ,
774 Identifier rb
775 RightParenthesis )
776 RightParenthesis )
777 RightParenthesis )
778 sub -
779 Identifier str_test
780 LeftBracket [
781 Identifier ss
782 LeftBracket [
783 ConstantInt 0
784 RightBracket ]
785 RightBracket ]
786 add +
787 ConstantChar 'H'
788 add +
789 sub -
790 ConstantInt 70
791 Semicolon ;
792 Identifier do
793 LeftBrace {
794 Identifier ra
795 assign =
796 add +
797 Identifier ra
798 add +
799 sub -
800 ConstantInt 10
801 Semicolon ;
802 RightBrace }
803 Identifier while
804 LeftParentheis (
805 Identifier ra
806 bgt >
807 ConstantInt 20
808 RightParenthesis )
809 KeyWord if
810 LeftParentheis (
811 Identifier ra
812 blt <
813 ConstantInt 20
814 RightParenthesis )
815 LeftBrace {
816 Identifier ra
817 assign =
818 add +
819 add +
820 ConstantInt 10
821 add +
822 ConstantInt 0
823 Semicolon ;
824 RightBrace }
825 Identifier printf
826 LeftParentheis (
827 ConstantString "Please input some numbers(non-zero),the count is "
828 Comma ,
829 Identifier ra
830 RightParenthesis )
831 Semicolon ;
832 Identifier i
833 assign =
834 ConstantInt 0
835 Semicolon ;
836 Identifier do
837 LeftBrace {
838 Identifier scanf
839 LeftParentheis (
840 Identifier number
841 LeftBracket [
842 Identifier i
843 RightBracket ]
844 RightParenthesis )
845 Semicolon ;
846 KeyWord if
847 LeftParentheis (
848 Identifier number
849 LeftBracket [
850 Identifier i
851 RightBracket ]
852 RightParenthesis )
853 Identifier i
854 assign =
855 Identifier i
856 add +
857 ConstantInt 1
858 Semicolon ;
859 RightBrace }
860 Identifier while
861 LeftParentheis (
862 Identifier i
863 blt <
864 Identifier ra
865 RightParenthesis )
866 Identifier sum
867 assign =
868 Identifier calcu
869 LeftParentheis (
870 Identifier ra
871 RightParenthesis )
872 Semicolon ;
873 Identifier aver
874 assign =
875 Identifier sum
876 div /
877 Identifier ra
878 Semicolon ;
879 Identifier cov
880 assign =
881 Identifier calcuCov
882 LeftParentheis (
883 Identifier ra
884 Comma ,
885 Identifier aver
886 RightParenthesis )
887 Semicolon ;
888 Identifier cov
889 assign =
890 Identifier cov
891 div /
892 Identifier ra
893 Semicolon ;
894 Identifier printf
895 LeftParentheis (
896 ConstantString "The sum of input numbers is "
897 Comma ,
898 Identifier sum
899 RightParenthesis )
900 Semicolon ;
901 Identifier printf
902 LeftParentheis (
903 ConstantString "    "
904 RightParenthesis )
905 Semicolon ;
906 Identifier printf
907 LeftParentheis (
908 ConstantString "The cov of input number is "
909 Comma ,
910 Identifier cov
911 RightParenthesis )
912 Semicolon ;
913 Identifier quick_sort
914 LeftParentheis (
915 ConstantInt 0
916 Comma ,
917 Identifier ra
918 sub -
919 ConstantInt 1
920 RightParenthesis )
921 Semicolon ;
922 Identifier i
923 assign =
924 ConstantInt 0
925 Semicolon ;
926 Identifier do
927 LeftBrace {
928 Identifier printf
929 LeftParentheis (
930 Identifier number
931 LeftBracket [
932 Identifier i
933 RightBracket ]
934 RightParenthesis )
935 Semicolon ;
936 Identifier i
937 assign =
938 Identifier i
939 add +
940 ConstantInt 1
941 Semicolon ;
942 RightBrace }
943 Identifier while
944 LeftParentheis (
945 Identifier i
946 blt <
947 Identifier ra
948 RightParenthesis )
949 KeyWord return
950 Semicolon ;
951 RightBrace }
