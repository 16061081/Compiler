1. 设计四元式

按照要求，采取中缀表达式，其中所有四元式产生的临时变量以#开头，例如#1, #2, #3等等，依此类推。

主要语法和课程要求相同，有不同的地方如下：
PRINT后加上了_int _char _-string代表输出的是整数、字符、还是字符串

在每个函数的局部变量定义完之后，会有一个BEGIN，是局部变量定义结束的标志。

LABEL_i代表标签，其不作为单独的一行，而是在它所代表的位置的同一行。

2. 从四元式生成目标代码

指令主要包括算数运算操作(add sub mul div move)、比较操作(bne beq等)、跳转（j jal jr）、访存操作(lw sw)

寄存器的分配及选择如下：

全局寄存器 $s0 - $s7
临时寄存器 $t0 - $t7
一次性使用的寄存器 $t8 - $t9 （例如计算数组地址、偏移，或者是比较的运算结果，或者是参数压栈）

按照mips的语法选择mips指令，操作数的分配方案如下：
对于已经分配到全局寄存器的变量（一般是局部变量或临时变量），直接用这个寄存器就好。
对于没有分配到全局寄存器的变量（一般是全局变量、函数参数或图着色没有分配到的局部变量或临时变量），向临时寄存器池申请，若有空闲的则直接分配，否则用LRU算法(最近最久未使用)淘汰一个寄存器（如果还活跃就需要写回到内存空间），将这个新淘汰的寄存器分配给它。


3. 运行栈设计（栈只能在栈顶插入、删除）

.data区域只保存输出的字符串。

$gp是全局变量栈底指针，其值等于代码刚开始执行时的栈指针位置，我们在main函数执行前先保存全局变量。之后在访存全局变量是使用的即为$gp的偏移量。

每次入函数，首先开辟参数局部变量的空间，然后保存目前的栈的位置($sp)、返回地址($ra)之前函数栈底指针($fp)到内存空间，然后开辟该函数需要的临时变量的空间。每次函数结束的时候，恢复$sp、$ra、$fp，然后跳转回原函数。

