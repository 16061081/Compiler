.data

str2:	.asciiz ""

str3:	.asciiz "************************"

str25:	.asciiz "C(n,m) is Odd or Even:"

str29:	.asciiz "C:"

str26:	.asciiz "END WORK"

str19:	.asciiz "END test_for_1_loop"

str23:	.asciiz "END test_for_2_loop"

str10:	.asciiz "END test_switch"

str9:	.asciiz "FAIL_switch1"

str31:	.asciiz "Fail test_call"

str5:	.asciiz "Int="

str28:	.asciiz "M:"

str27:	.asciiz "N:"

str1:	.asciiz "Please enter n,m,k,ch:"

str14:	.asciiz "START test_for_1_loop"

str20:	.asciiz "START test_for_2_loop"

str4:	.asciiz "START test_switch"

str24:	.asciiz "START work"

str30:	.asciiz "Success test_call="

str16:	.asciiz "ch = "

str6:	.asciiz "fail_switch1"

str15:	.asciiz "k = "

str11:	.asciiz "mx = "

str7:	.asciiz "success_switch1"

str8:	.asciiz "success_switch2"

str18:	.asciiz "test_for_1_loop fail!"

str17:	.asciiz "test_for_1_loop success!"

str22:	.asciiz "test_for_2_loop fail!"

str21:	.asciiz "test_for_2_loop success!"

str13:	.asciiz "test_max fail!"

str12:	.asciiz "test_max success!"

.text

move	$gp, $sp
subi	$sp,$sp,80040
j	main

mymax:
move	$s1,$sp
move	$s0,$fp
addi	$fp,$sp,8
subi	$sp,$sp,4
#END Const&Variable define
sw	$s1,0($sp)
sw	$ra,-4($sp)
sw	$s0,-8($sp)
addi	$sp,$sp,-12
#ans = x
lw	$t0,-0($fp)
move	$s7,$t0
#	y > x
#	BZ LABEL_1
lw	$t0,-4($fp)
lw	$t1,-0($fp)
ble	$t0,$t1,LABEL_1
#ans = y
lw	$t0,-4($fp)
move	$s7,$t0
#	GOTO LABEL_2
j	LABEL_2
LABEL_1:
LABEL_2:
#	ans ret 
move	$v1,$s7
lw	$sp,-12($fp)
addi	$sp,$sp,8
lw	$ra,-16($fp)
lw	$fp,-20($fp)
jr	$ra
factorial:
move	$s1,$sp
move	$s0,$fp
addi	$fp,$sp,4
subi	$sp,$sp,4
#END Const&Variable define
sw	$s1,0($sp)
sw	$ra,-4($sp)
sw	$s0,-8($sp)
addi	$sp,$sp,-20
#	n < 0
#	BZ LABEL_3
lw	$t0,-0($fp)
bge	$t0,0,LABEL_3
#	-1 ret 
li	$v1,-1
lw	$sp,-8($fp)
addi	$sp,$sp,4
lw	$ra,-12($fp)
lw	$fp,-16($fp)
jr	$ra
LABEL_3:
#	SWITCH n
#	n == 0
#	BZ LABEL_6
lw	$t0,-0($fp)
bne	$t0,0,LABEL_6
#res = 1
li	$s7,1
#	GOTO LABEL_8
j	LABEL_8
LABEL_6:
#	n == 1
#	BZ LABEL_7
lw	$t0,-0($fp)
bne	$t0,1,LABEL_7
#res = 1
li	$s7,1
#	GOTO LABEL_8
j	LABEL_8
LABEL_7:
##2 = n - 1
lw	$t0,-0($fp)
sub	$s7,$t0,1
#	PUSH #2
sw	$s7,0($sp)
addi	$sp,$sp,-4
#	call factorial
jal	factorial
##3 = RET_int
move	$s7,$v1
#res = n * #3
lw	$t0,-0($fp)
mul	$s7,$t0,$s7
LABEL_8:
#	res ret 
move	$v1,$s7
lw	$sp,-8($fp)
addi	$sp,$sp,4
lw	$ra,-12($fp)
lw	$fp,-16($fp)
jr	$ra
C:
move	$s1,$sp
move	$s0,$fp
addi	$fp,$sp,8
subi	$sp,$sp,12
#END Const&Variable define
sw	$s1,0($sp)
sw	$ra,-4($sp)
sw	$s0,-8($sp)
addi	$sp,$sp,-36
#	m <= n
#	BZ LABEL_9
lw	$t0,-0($fp)
lw	$t1,-4($fp)
bgt	$t0,$t1,LABEL_9
LABEL_9:
#	m > n
#	BZ LABEL_11
lw	$t0,-0($fp)
lw	$t1,-4($fp)
ble	$t0,$t1,LABEL_11
#	-1 ret 
li	$v1,-1
lw	$sp,-20($fp)
addi	$sp,$sp,8
lw	$ra,-24($fp)
lw	$fp,-28($fp)
jr	$ra
LABEL_11:
#	PUSH n
lw	$t9,-4($fp)
sw	$t9,0($sp)
addi	$sp,$sp,-4
#	call factorial
jal	factorial
##6 = RET_int
move	$s1,$v1
#	PUSH m
lw	$t9,-0($fp)
sw	$t9,0($sp)
addi	$sp,$sp,-4
#	call factorial
sw	$s1,-32($fp)
jal	factorial
lw	$s1,-32($fp)
##7 = RET_int
move	$s0,$v1
##8 = #6 / #7
div	$s1,$s1,$s0
##9 = n - m
lw	$t0,-4($fp)
lw	$t1,-0($fp)
sub	$s0,$t0,$t1
#	PUSH #9
sw	$s0,0($sp)
addi	$sp,$sp,-4
#	call factorial
sw	$s1,-40($fp)
jal	factorial
lw	$s1,-40($fp)
##10 = RET_int
move	$s0,$v1
##11 = #8 / #10
div	$s7,$s1,$s0
#	#11 ret 
move	$v1,$s7
lw	$sp,-20($fp)
addi	$sp,$sp,8
lw	$ra,-24($fp)
lw	$fp,-28($fp)
jr	$ra
init:
move	$s1,$sp
move	$s0,$fp
addi	$fp,$sp,0
#END Const&Variable define
sw	$s1,0($sp)
sw	$ra,-4($sp)
sw	$s0,-8($sp)
addi	$sp,$sp,-12
#m = 5
li	$t0,5
#	PRINT "Please enter n,m,k,ch:"
la	$a0,str1
li	$v0,4
syscall
#	PRINTLN 
#	READ n
li	$v0,5
syscall
move	$t1,$v0
#	READ m
li	$v0,5
syscall
move	$t0,$v0
#	READ k
li	$v0,5
syscall
move	$t2,$v0
#	READ ch
li	$v0,12
syscall
move	$t3,$v0
#	PRINT ""
la	$a0,str2
li	$v0,4
syscall
#	PRINTLN 
sw	$t0,-40012($gp)
sw	$t1,-40008($gp)
sw	$t2,-40016($gp)
sw	$t3,-40036($gp)
#	 ret 
lw	$sp,-0($fp)
lw	$ra,-4($fp)
lw	$fp,-8($fp)
jr	$ra
work:
move	$s1,$sp
move	$s0,$fp
addi	$fp,$sp,8
subi	$sp,$sp,4
#END Const&Variable define
sw	$s1,0($sp)
sw	$ra,-4($sp)
sw	$s0,-8($sp)
addi	$sp,$sp,-24
#	PUSH m
lw	$t9,-0($fp)
sw	$t9,0($sp)
addi	$sp,$sp,-4
#	PUSH n
lw	$t9,-4($fp)
sw	$t9,0($sp)
addi	$sp,$sp,-4
#	call C
jal	C
#ans = RET_int
move	$s0,$v1
##13 = ans / 2
div	$s1,$s0,2
##14 = 2 * #13
mul	$s1,$s1,2
##15 = ans - #14
sub	$s7,$s0,$s1
#	SWITCH #15
#	#15 == 1
#	BZ LABEL_14
bne	$s7,1,LABEL_14
#	'O' ret 
li	$v1,'O'
lw	$sp,-12($fp)
addi	$sp,$sp,8
lw	$ra,-16($fp)
lw	$fp,-20($fp)
jr	$ra
#	GOTO LABEL_16
j	LABEL_16
LABEL_14:
#	#15 == -1
#	BZ LABEL_15
bne	$s7,-1,LABEL_15
#	'O' ret 
li	$v1,'O'
lw	$sp,-12($fp)
addi	$sp,$sp,8
lw	$ra,-16($fp)
lw	$fp,-20($fp)
jr	$ra
#	GOTO LABEL_16
j	LABEL_16
LABEL_15:
#	'E' ret 
li	$v1,'E'
lw	$sp,-12($fp)
addi	$sp,$sp,8
lw	$ra,-16($fp)
lw	$fp,-20($fp)
jr	$ra
LABEL_16:
#	'*' ret 
li	$v1,'*'
lw	$sp,-12($fp)
addi	$sp,$sp,8
lw	$ra,-16($fp)
lw	$fp,-20($fp)
jr	$ra
test_switch:
move	$s1,$sp
move	$s0,$fp
addi	$fp,$sp,0
subi	$sp,$sp,4004
#END Const&Variable define
sw	$s1,0($sp)
sw	$ra,-4($sp)
sw	$s0,-8($sp)
addi	$sp,$sp,-64
#	PRINT "************************"
la	$a0,str3
li	$v0,4
syscall
#	PRINTLN 
#	PRINT "START test_switch"
la	$a0,str4
li	$v0,4
syscall
#	PRINTLN 
#a[2] = -1
subi	$t9,$fp,4
sub	$t9,$t9,8
li	$t8,-1
sw	$t8,0($t9)
#a[1] = -2
subi	$t9,$fp,4
sub	$t9,$t9,4
li	$t8,-2
sw	$t8,0($t9)
#Int = 2
li	$s0,2
##20 = Int
move	$s7,$s0
#	PRINT "Int="
la	$a0,str5
li	$v0,4
syscall
#	PRINT #20
move	$a0,$s7
li	$v0,1
syscall
#	PRINTLN 
#Int = a[2]
subi	$t9,$fp,4
sub	$t9,$t9,8
lw	$t9,0($t9)
move	$s0,$t9
##24 = Int
move	$s7,$s0
#	PRINT "Int="
la	$a0,str5
li	$v0,4
syscall
#	PRINT #24
move	$a0,$s7
li	$v0,1
syscall
#	PRINTLN 
##27 = a[2]
subi	$t9,$fp,4
sub	$t9,$t9,8
lw	$t9,0($t9)
move	$s7,$t9
##28 = 2 + #27
add	$s7,$s7,2
#Int = a[#28]
subi	$t9,$fp,4
sll	$t8,$s7,2
sub	$t9,$t9,$t8
lw	$t9,0($t9)
move	$s0,$t9
##30 = Int
move	$s7,$s0
#	PRINT "Int="
la	$a0,str5
li	$v0,4
syscall
#	PRINT #30
move	$a0,$s7
li	$v0,1
syscall
#	PRINTLN 
##33 = a[2]
subi	$t9,$fp,4
sub	$t9,$t9,8
lw	$t9,0($t9)
move	$s7,$t9
##34 = 2 + #33
add	$s7,$s7,2
##35 = a[#34]
subi	$t9,$fp,4
sll	$t8,$s7,2
sub	$t9,$t9,$t8
lw	$t9,0($t9)
move	$s7,$t9
##36 = #35 + 3
add	$s7,$s7,3
#Int = a[#36]
subi	$t9,$fp,4
sll	$t8,$s7,2
sub	$t9,$t9,$t8
lw	$t9,0($t9)
move	$s0,$t9
##38 = Int
move	$s1,$s0
#	PRINT "Int="
la	$a0,str5
li	$v0,4
syscall
#	PRINT #38
move	$a0,$s1
li	$v0,1
syscall
#	PRINTLN 
#	SWITCH Int
#	Int == -1
#	BZ LABEL_18
bne	$s0,-1,LABEL_18
#	PRINT "fail_switch1"
la	$a0,str6
li	$v0,4
syscall
#	PRINTLN 
#	GOTO LABEL_20
j	LABEL_20
LABEL_18:
#	Int == -2
#	BZ LABEL_19
bne	$s0,-2,LABEL_19
#	PRINT "success_switch1"
la	$a0,str7
li	$v0,4
syscall
#	PRINTLN 
#	GOTO LABEL_20
j	LABEL_20
LABEL_19:
LABEL_20:
##39 = Int + 1
add	$s1,$s0,1
##40 = #39 + 'b'
add	$s1,$s1,'b'
#	SWITCH #40
#	#40 == 1
#	BZ LABEL_22
bne	$s1,1,LABEL_22
#Int = Int + 1
add	$s0,$s0,1
#	GOTO LABEL_25
j	LABEL_25
LABEL_22:
#	#40 == 97
#	BZ LABEL_23
bne	$s1,97,LABEL_23
#	PRINT "success_switch2"
la	$a0,str8
li	$v0,4
syscall
#	PRINTLN 
#	GOTO LABEL_25
j	LABEL_25
LABEL_23:
#	#40 == -123
#	BZ LABEL_24
bne	$s1,-123,LABEL_24
##43 = Int
move	$s7,$s0
#	PRINT "fail_switch1"
la	$a0,str6
li	$v0,4
syscall
#	PRINT #43
move	$a0,$s7
li	$v0,1
syscall
#	PRINTLN 
#	PRINT #43
move	$a0,$s7
li	$v0,1
syscall
#	PRINTLN 
#	GOTO LABEL_25
j	LABEL_25
LABEL_24:
#	PRINT "FAIL_switch1"
la	$a0,str9
li	$v0,4
syscall
#	PRINTLN 
LABEL_25:
#	PRINT "END test_switch"
la	$a0,str10
li	$v0,4
syscall
#	PRINTLN 
#	PRINT "************************"
la	$a0,str3
li	$v0,4
syscall
#	PRINTLN 
#	 ret 
lw	$sp,-4004($fp)
lw	$ra,-4008($fp)
lw	$fp,-4012($fp)
jr	$ra
test_max:
move	$s1,$sp
move	$s0,$fp
addi	$fp,$sp,0
#END Const&Variable define
sw	$s1,0($sp)
sw	$ra,-4($sp)
sw	$s0,-8($sp)
addi	$sp,$sp,-20
#	PRINT "************************"
la	$a0,str3
li	$v0,4
syscall
#	PRINTLN 
#	PUSH 1
li	$t9,1
sw	$t9,0($sp)
addi	$sp,$sp,-4
#	PUSH 2
li	$t9,2
sw	$t9,0($sp)
addi	$sp,$sp,-4
#	call mymax
jal	mymax
#x = RET_int
move	$t0,$v1
##46 = x + +8
add	$s7,$t0,+8
#	PUSH #46
sw	$s7,0($sp)
addi	$sp,$sp,-4
#	PUSH 9
li	$t9,9
sw	$t9,0($sp)
addi	$sp,$sp,-4
sw	$t0,-40020($gp)
#	call mymax
jal	mymax
#x = RET_int
move	$t0,$v1
#y = 4
li	$t1,4
#z = 7
li	$t2,7
sw	$t0,-40020($gp)
sw	$t1,-40024($gp)
sw	$t2,-40028($gp)
#	x > y
#	BZ LABEL_26
lw	$t0,-40020($gp)
lw	$t1,-40024($gp)
ble	$t0,$t1,LABEL_26
#	x > z
#	BZ LABEL_28
lw	$t0,-40020($gp)
lw	$t1,-40028($gp)
ble	$t0,$t1,LABEL_28
#mx = x
lw	$t0,-40020($gp)
move	$t1,$t0
sw	$t1,-40032($gp)
#	GOTO LABEL_29
j	LABEL_29
LABEL_28:
#mx = z
lw	$t0,-40028($gp)
move	$t1,$t0
sw	$t1,-40032($gp)
LABEL_29:
#	GOTO LABEL_27
j	LABEL_27
LABEL_26:
#	y > z
#	BZ LABEL_30
lw	$t0,-40024($gp)
lw	$t1,-40028($gp)
ble	$t0,$t1,LABEL_30
#mx = y
lw	$t0,-40024($gp)
move	$t1,$t0
sw	$t1,-40032($gp)
#	GOTO LABEL_31
j	LABEL_31
LABEL_30:
#mx = z
lw	$t0,-40028($gp)
move	$t1,$t0
sw	$t1,-40032($gp)
LABEL_31:
LABEL_27:
##48 = mx
lw	$t0,-40032($gp)
move	$s7,$t0
#	PRINT "mx = "
la	$a0,str11
li	$v0,4
syscall
#	PRINT #48
move	$a0,$s7
li	$v0,1
syscall
#	PRINTLN 
#	mx == 10
#	BZ LABEL_32
lw	$t0,-40032($gp)
bne	$t0,10,LABEL_32
#	PRINT "test_max success!"
la	$a0,str12
li	$v0,4
syscall
#	PRINTLN 
#	GOTO LABEL_33
j	LABEL_33
LABEL_32:
#	PRINT "test_max fail!"
la	$a0,str13
li	$v0,4
syscall
#	PRINTLN 
LABEL_33:
#	PRINT "************************"
la	$a0,str3
li	$v0,4
syscall
#	PRINTLN 
#	 ret 
lw	$sp,-0($fp)
lw	$ra,-4($fp)
lw	$fp,-8($fp)
jr	$ra
test_for_1_loop:
move	$s1,$sp
move	$s0,$fp
addi	$fp,$sp,0
#END Const&Variable define
sw	$s1,0($sp)
sw	$ra,-4($sp)
sw	$s0,-8($sp)
addi	$sp,$sp,-28
#i = k + 1
lw	$t0,-40016($gp)
add	$t1,$t0,1
#	PRINT "************************"
la	$a0,str3
li	$v0,4
syscall
#	PRINTLN 
#	PRINT "START test_for_1_loop"
la	$a0,str14
li	$v0,4
syscall
#	PRINTLN 
sw	$t1,-40000($gp)
LABEL_34:
##50 = k + i
lw	$t0,-40016($gp)
lw	$t1,-40000($gp)
add	$s7,$t0,$t1
#a[i] = #50
subi	$t9,$gp,0
sll	$t8,$t1,2
sub	$t9,$t9,$t8
sw	$s7,0($t9)
#s[i] = ch
lw	$t2,-40036($gp)
subi	$t9,$gp,40040
sll	$t8,$t1,2
sub	$t9,$t9,$t8
sw	$t2,0($t9)
#i = i - 1
sub	$t1,$t1,1
sw	$t1,-40000($gp)
#	i >= 0
#	BZ LABEL_35
lw	$t0,-40000($gp)
blt	$t0,0,LABEL_35
#	GOTO LABEL_34
j	LABEL_34
LABEL_35:
#i = 0
li	$t0,0
sw	$t0,-40000($gp)
LABEL_36:
#k = k + 1
lw	$t0,-40016($gp)
add	$t0,$t0,1
#i = i - 1
lw	$t1,-40000($gp)
sub	$t1,$t1,1
sw	$t0,-40016($gp)
sw	$t1,-40000($gp)
#	i > k
#	BZ LABEL_37
lw	$t0,-40000($gp)
lw	$t1,-40016($gp)
ble	$t0,$t1,LABEL_37
#	GOTO LABEL_36
j	LABEL_36
LABEL_37:
##52 = k
lw	$t0,-40016($gp)
move	$s7,$t0
#	PRINT "k = "
la	$a0,str15
li	$v0,4
syscall
#	PRINT #52
move	$a0,$s7
li	$v0,1
syscall
#	PRINTLN 
##53 = s[k]
subi	$t9,$gp,40040
sll	$t8,$t0,2
sub	$t9,$t9,$t8
lw	$t9,0($t9)
move	$s7,$t9
#	PRINT "ch = "
la	$a0,str16
li	$v0,4
syscall
#	PRINT #53
move	$a0,$s7
li	$v0,11
syscall
#	PRINTLN 
##54 = s[k]
subi	$t9,$gp,40040
sll	$t8,$t0,2
sub	$t9,$t9,$t8
lw	$t9,0($t9)
move	$s7,$t9
#	#54 == ch
#	BZ LABEL_38
lw	$t0,-40036($gp)
bne	$s7,$t0,LABEL_38
#	PRINT "test_for_1_loop success!"
la	$a0,str17
li	$v0,4
syscall
#	PRINTLN 
#	GOTO LABEL_39
j	LABEL_39
LABEL_38:
#	PRINT "test_for_1_loop fail!"
la	$a0,str18
li	$v0,4
syscall
#	PRINTLN 
LABEL_39:
#	PRINT "END test_for_1_loop"
la	$a0,str19
li	$v0,4
syscall
#	PRINTLN 
#	PRINT "************************"
la	$a0,str3
li	$v0,4
syscall
#	PRINTLN 
#	 ret 
lw	$sp,-0($fp)
lw	$ra,-4($fp)
lw	$fp,-8($fp)
jr	$ra
test_for_2_loop:
move	$s1,$sp
move	$s0,$fp
addi	$fp,$sp,4
#END Const&Variable define
sw	$s1,0($sp)
sw	$ra,-4($sp)
sw	$s0,-8($sp)
addi	$sp,$sp,-44
##79 = -2
li	$s0,-2
#Int = -2
li	$t0,-2
##56 = #79
move	$s2,$s0
##57 = #79 + 1
add	$s1,$s0,1
##78 = #57
move	$s0,$s1
#Int = #57
move	$t0,$s1
#Int = #78 + 1
add	$t0,$s0,1
##59 = Int
move	$s0,$t0
#i = Int
move	$t1,$t0
#	PRINT "************************"
la	$a0,str3
li	$v0,4
syscall
#	PRINTLN 
#	PRINT "START test_for_2_loop"
la	$a0,str20
li	$v0,4
syscall
#	PRINTLN 
#	PRINT "Int="
la	$a0,str5
li	$v0,4
syscall
#	PRINT #56
move	$a0,$s2
li	$v0,1
syscall
#	PRINTLN 
#	PRINT "Int="
la	$a0,str5
li	$v0,4
syscall
#	PRINT #59
move	$a0,$s0
li	$v0,1
syscall
#	PRINTLN 
sw	$t0,-0($fp)
sw	$t1,-40000($gp)
LABEL_40:
#i = Int
lw	$t0,-0($fp)
move	$t1,$t0
sw	$t1,-40000($gp)
LABEL_41:
#Int = Int + 1
lw	$t0,-0($fp)
add	$t0,$t0,1
#i = i + 1
lw	$t1,-40000($gp)
add	$t1,$t1,1
##61 = i - 1
sub	$s7,$t1,1
sw	$t0,-0($fp)
sw	$t1,-40000($gp)
#	i <= #61
#	BZ LABEL_42
lw	$t0,-40000($gp)
bgt	$t0,$s7,LABEL_42
#	GOTO LABEL_41
j	LABEL_41
LABEL_42:
#i = i + 1
lw	$t0,-40000($gp)
add	$t0,$t0,1
##62 = 1000 - Int
lw	$t1,-0($fp)
li	$t8,1000
sub	$s7,$t8,$t1
sw	$t0,-40000($gp)
#	i <= #62
#	BZ LABEL_43
lw	$t0,-40000($gp)
bgt	$t0,$s7,LABEL_43
#	GOTO LABEL_40
j	LABEL_40
LABEL_43:
##63 = Int
lw	$t0,-0($fp)
move	$s7,$t0
#	PRINT "Int="
la	$a0,str5
li	$v0,4
syscall
#	PRINT #63
move	$a0,$s7
li	$v0,1
syscall
#	PRINTLN 
#	Int == 500
#	BZ LABEL_44
lw	$t0,-0($fp)
bne	$t0,500,LABEL_44
#	PRINT "test_for_2_loop success!"
la	$a0,str21
li	$v0,4
syscall
#	PRINTLN 
#	GOTO LABEL_45
j	LABEL_45
LABEL_44:
#	PRINT "test_for_2_loop fail!"
la	$a0,str22
li	$v0,4
syscall
#	PRINTLN 
LABEL_45:
#	PRINT "END test_for_2_loop"
la	$a0,str23
li	$v0,4
syscall
#	PRINTLN 
#	PRINT "************************"
la	$a0,str3
li	$v0,4
syscall
#	PRINTLN 
#	 ret 
lw	$sp,-4($fp)
addi	$sp,$sp,4
lw	$ra,-8($fp)
lw	$fp,-12($fp)
jr	$ra
test_call:
move	$s1,$sp
move	$s0,$fp
addi	$fp,$sp,0
#END Const&Variable define
sw	$s1,0($sp)
sw	$ra,-4($sp)
sw	$s0,-8($sp)
addi	$sp,$sp,-32
#	PUSH 2
li	$t9,2
sw	$t9,0($sp)
addi	$sp,$sp,-4
#	PUSH 2
li	$t9,2
sw	$t9,0($sp)
addi	$sp,$sp,-4
#	PUSH 15
li	$t9,15
sw	$t9,0($sp)
addi	$sp,$sp,-4
#	call mymax
jal	mymax
##65 = RET_int
move	$s1,$v1
#	PUSH 2
li	$t9,2
sw	$t9,0($sp)
addi	$sp,$sp,-4
#	PUSH 4
li	$t9,4
sw	$t9,0($sp)
addi	$sp,$sp,-4
#	call mymax
sw	$s1,-12($fp)
jal	mymax
lw	$s1,-12($fp)
##66 = RET_int
move	$s0,$v1
##67 = #65 / #66
div	$s7,$s1,$s0
##69 = #67 * 99
mul	$s7,$s7,99
#	PUSH #69
sw	$s7,0($sp)
addi	$sp,$sp,-4
#	call mymax
jal	mymax
##70 = RET_int
move	$s7,$v1
#	#70 ret 
move	$v1,$s7
lw	$sp,-0($fp)
lw	$ra,-4($fp)
lw	$fp,-8($fp)
jr	$ra
main:
move	$s1,$sp
move	$s0,$fp
addi	$fp,$sp,0
#END Const&Variable define
sw	$s1,0($sp)
sw	$ra,-4($sp)
sw	$s0,-8($sp)
addi	$sp,$sp,-36
#	call init
jal	init
#i = 0
li	$t0,0
sw	$t0,-40000($gp)
LABEL_46:
#j = m - i
lw	$t0,-40012($gp)
lw	$t1,-40000($gp)
sub	$t2,$t0,$t1
sw	$t2,-40004($gp)
#	i == 0
#	BZ LABEL_47
lw	$t0,-40000($gp)
bne	$t0,0,LABEL_47
#	PRINT "************************"
la	$a0,str3
li	$v0,4
syscall
#	PRINTLN 
#	PRINT "START work"
la	$a0,str24
li	$v0,4
syscall
#	PRINTLN 
#	PUSH j
lw	$t9,-40004($gp)
sw	$t9,0($sp)
addi	$sp,$sp,-4
#	PUSH n
lw	$t9,-40008($gp)
sw	$t9,0($sp)
addi	$sp,$sp,-4
#	call work
jal	work
##72 = RET_char
move	$s7,$v1
#	PRINT "C(n,m) is Odd or Even:"
la	$a0,str25
li	$v0,4
syscall
#	PRINT #72
move	$a0,$s7
li	$v0,11
syscall
#	PRINTLN 
#	PRINT "END WORK"
la	$a0,str26
li	$v0,4
syscall
#	PRINTLN 
#	PRINT "************************"
la	$a0,str3
li	$v0,4
syscall
#	PRINTLN 
LABEL_47:
##73 = n
lw	$t0,-40008($gp)
move	$s1,$t0
##74 = j
lw	$t1,-40004($gp)
move	$s0,$t1
#	PRINT "N:"
la	$a0,str27
li	$v0,4
syscall
#	PRINT #73
move	$a0,$s1
li	$v0,1
syscall
#	PRINTLN 
#	PRINT "M:"
la	$a0,str28
li	$v0,4
syscall
#	PRINT #74
move	$a0,$s0
li	$v0,1
syscall
#	PRINTLN 
#	PUSH j
sw	$t1,0($sp)
addi	$sp,$sp,-4
#	PUSH n
sw	$t0,0($sp)
addi	$sp,$sp,-4
#	call C
jal	C
##75 = RET_int
move	$s7,$v1
#i = i + 1
lw	$t0,-40000($gp)
add	$t0,$t0,1
#	PRINT "C:"
la	$a0,str29
li	$v0,4
syscall
#	PRINT #75
move	$a0,$s7
li	$v0,1
syscall
#	PRINTLN 
#	PRINT "************************"
la	$a0,str3
li	$v0,4
syscall
#	PRINTLN 
sw	$t0,-40000($gp)
#	i <= m
#	BZ LABEL_49
lw	$t0,-40000($gp)
lw	$t1,-40012($gp)
bgt	$t0,$t1,LABEL_49
#	GOTO LABEL_46
j	LABEL_46
LABEL_49:
#	call test_max
jal	test_max
#	call test_for_1_loop
jal	test_for_1_loop
#	call test_switch
jal	test_switch
#	PUSH 1
li	$t9,1
sw	$t9,0($sp)
addi	$sp,$sp,-4
#	call test_for_2_loop
jal	test_for_2_loop
#	call test_call
jal	test_call
##76 = RET_int
move	$s7,$v1
#	#76 == 297
#	BZ LABEL_50
bne	$s7,297,LABEL_50
#	call test_call
jal	test_call
##77 = RET_int
move	$s7,$v1
#	PRINT "Success test_call="
la	$a0,str30
li	$v0,4
syscall
#	PRINT #77
move	$a0,$s7
li	$v0,1
syscall
#	PRINTLN 
#	GOTO LABEL_51
j	LABEL_51
LABEL_50:
#	PRINT "Fail test_call"
la	$a0,str31
li	$v0,4
syscall
#	PRINTLN 
LABEL_51:
#	PRINT "************************"
la	$a0,str3
li	$v0,4
syscall
#	PRINTLN 
#	 ret 
li	$v0,10
syscall
